# -*- coding: utf-8 -*-
"""Copy of CS482 NCAA Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2DyR4lmrAAhQYaHFrOnUApvVARC2f3H
"""

from google.colab import drive
drive.mount('/content/drive')

BASE_PATH = "/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/"
RESULTS_NAME = "MNCAATourneyDetailedResults.csv"
SEED_NAME = "MNCAATourneySeeds.csv"
RANK_NAME = "MMasseyOrdinals_thruDay128.csv"
TEST_NAME = "MSampleSubmissionStage2.csv"

model_type = 'Autolgbm'  
message='baseline'

train_filename = "./train.csv"
output = "output"
test_filename = "./test.csv"
task = None
targets = ['target']
features = None
categorical_features = None
use_gpu = False
num_folds = 10
seed = 42
num_trials = 10000
time_limit = 600
fast = False

TEST = False

!pip install autolgbm
!pip install jaxlib
!pip install gpjax
!pip install multipledispatch
!pip install optax

import pandas as pd
import numpy as np
import jax
import jax.numpy as jnp
import jax.random as jr
import random
import time
import gc
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import mean_squared_error
from lightgbm import LGBMRegressor
import matplotlib.pylab as plt
import seaborn as sns
from autolgbm import AutoLGBM

data1=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MNCAATourneySeedRoundSlots.csv')
data2=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MNCAATourneySeeds.csv')
data2 = data2 [(data2 ["Season"] == 2022)]
data2= data2[['Seed', 'TeamID']]
data3=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MNCAATourneySlots.csv')
data4=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MTeams.csv')
data3 = data3 [(data3 ["Season"] == 2022)]
data5=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MTeamConferences.csv')
data5 = data5 [(data5 ["Season"] == 2022)]
data6=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MMasseyOrdinals_thruDay128.csv')
data6 = data6 [(data6 ["Season"] == 2022)]
data6 = data6 [(data6 ["RankingDayNum"] > 122)]
data6 = data6 [(data6 ["SystemName"] == 'NET')]
data7=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MRegularSeasonCompactResults.csv')
data7 = data7 [(data7 ["Season"] == 2022)]
data9=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MRegularSeasonCompactResults.csv')
data9 = data9 [(data9 ["Season"] == 2022)]
data8=pd.read_csv('/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MRegularSeasonDetailedResults.csv')
data8 = data8 [(data8 ["Season"] == 2022)]

data1.head()

data3.head()

output4 = pd.merge(data2, data4, on='TeamID', how='inner')
output4=pd.merge(output4,data5, on='TeamID', how='inner')
output4=pd.merge(output4,data6, on='TeamID', how='inner')
output4= output4[['Seed', 'TeamID', 'TeamName','ConfAbbrev','OrdinalRank']]
output4.head()

data7.sort_values(data7.columns[1],axis=0,inplace=True)
data7 = data7[['DayNum', 'WTeamID', 'WScore', 'LTeamID', 'LScore']]
data7.head()

#data9.sort_values(data9.columns[3],axis=0,inplace=True)
data9 = data9[['DayNum', 'WTeamID', 'WScore', 'LTeamID', 'LScore']]
data9.head()

df_TDresults = pd.read_csv(BASE_PATH + RESULTS_NAME)
df_TDresults.head()

df_TDresults = pd.read_csv(BASE_PATH + RESULTS_NAME)
df_TDresults.head()

box_col = ["FGM","FGA","FGM3","FTM","FTA","OR","DR","Ast","TO","Stl","Blk","PF"]
df_boxW = df_TDresults[["WTeamID"]+["W" + col for col in box_col]]
df_boxL = df_TDresults[["LTeamID"]+["L" + col for col in box_col]]
df_boxW = df_boxW.rename(columns={"WTeamID":"TeamID"})
df_boxW = df_boxW.rename(columns={("W"+ col):col for col in box_col})
df_boxL = df_boxL.rename(columns={"LTeamID":"TeamID"})
df_boxL = df_boxL.rename(columns={("L"+ col):col for col in box_col})
df_box = pd.merge(df_boxW,df_boxL,on = ["TeamID"]+box_col,how="outer")
df_box = df_box.groupby(["TeamID"])[box_col].agg(np.mean).reset_index()
df_box.head()

df_TDresults2 = df_TDresults
df_TDresults = df_TDresults.rename(columns={"WTeamID":"Team1ID","LTeamID":"Team2ID","WScore":"T1Score","LScore":"T2Score"})
df_TDresults = df_TDresults.rename(columns={f"W{col}":f"T1{col}" for col in box_col})
df_TDresults = df_TDresults.rename(columns={f"L{col}":f"T2{col}" for col in box_col})
df_TDresults2 = df_TDresults2.rename(columns={"WTeamID":"Team2ID","LTeamID":"Team1ID","WScore":"T2Score","LScore":"T1Score"})

features = ["Season","Team1ID","Team2ID","T1Score","T2Score",'target']
df_TDresults['target'] = 1.0
df_TDresults2['target'] = 0.0
train = pd.merge(df_TDresults,df_TDresults2,on = features,how="outer")
train = train[features]
train.head()

box_T1 = df_box.copy()
box_T2 = df_box.copy()
box_T1.columns = ['Team1ID'] + ["T1"+col+"_mean" for col in box_col]
box_T2.columns = ['Team2ID'] + ["T2"+col+"_mean" for col in box_col]
train = pd.merge(train,box_T1,on = ["Team1ID"],how = "left")
train = pd.merge(train,box_T2,on = ["Team2ID"],how = "left")
train.head()

df_seeds = pd.read_csv(BASE_PATH + SEED_NAME)
df_seeds.head()

df_seeds["seed"] = df_seeds['Seed'].apply(lambda x: int(x[1:3]))
df_seeds = df_seeds.groupby(["TeamID"])["seed"].agg(np.mean).reset_index()
seeds_T1 = df_seeds[['TeamID','seed']].copy()
seeds_T2 = df_seeds[['TeamID','seed']].copy()
seeds_T1.columns = ['Team1ID','T1_seed']
seeds_T2.columns = ['Team2ID','T2_seed']
train = pd.merge(train,seeds_T1,on = ["Team1ID"],how = "left")
train = pd.merge(train,seeds_T2,on = ["Team2ID"],how = "left")
train["seeddiff"] = train["T1_seed"] - train["T2_seed"]
train.head()

df_MMOrdinals = pd.read_csv(BASE_PATH + RANK_NAME)
display(df_MMOrdinals.head())
df_rank = df_MMOrdinals.groupby(["TeamID"])["OrdinalRank"].agg(np.mean).reset_index()
df_rank.head()

ranks_T1 = df_rank.copy()
ranks_T2 = df_rank.copy()
ranks_T1.columns = ['Team1ID','T1_rank_mean']
ranks_T2.columns = ['Team2ID','T2_rank_mean']
train = pd.merge(train,ranks_T1,on = ["Team1ID"],how = "left")
train = pd.merge(train,ranks_T2,on = ["Team2ID"],how = "left")
train["rankdiff"] = train["T1_rank_mean"] - train["T2_rank_mean"]
train.head()

train = train.drop(columns = ['T1Score','T2Score'])
train.head()

test = pd.read_csv(BASE_PATH + TEST_NAME)
test.head()

test["Season"] = test['ID'].apply(lambda x: int(x[0:4]))
test["Team1ID"] = test['ID'].apply(lambda x: int(x[5:9]))
test["Team2ID"] = test['ID'].apply(lambda x: int(x[10:14]))
test.head()

test = pd.merge(test,box_T1,on = ["Team1ID"],how = "left")
test = pd.merge(test,box_T2,on = ["Team2ID"],how = "left")
test.head()

test = pd.merge(test,seeds_T1,on = ["Team1ID"],how = "left")
test = pd.merge(test,seeds_T2,on = ["Team2ID"],how = "left")
test["seeddiff"] = test["T1_seed"] - test["T2_seed"]

test = pd.merge(test,ranks_T1,on = ["Team1ID"],how = "left")
test = pd.merge(test,ranks_T2,on = ["Team2ID"],how = "left")
test["rankdiff"] = test["T1_rank_mean"] - test["T2_rank_mean"]

test = test.drop(columns = ['ID','Pred'])
test.head()

train.to_csv("train.csv",index = None)
test.to_csv("test.csv",index = None)

features=None

algbm = AutoLGBM(
    train_filename=train_filename,
    output=output,
    test_filename=test_filename,
    task=task,
    targets=targets,
    features=features,
    categorical_features=categorical_features,
    use_gpu=use_gpu,
    num_folds=num_folds,
    seed=seed,
    num_trials=num_trials,
    time_limit=time_limit,
    fast=fast,
)

algbm.train()

submission = pd.read_csv("/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MSampleSubmissionStage2.csv")
autolgb_pred = pd.read_csv("/content/output/test_predictions.csv")
submission['Pred'] = autolgb_pred['1.0']
# submission.rename(columns = {'1.0':'Pred'}, inplace = True)
submission.to_csv("submission.csv", index=False)
submission.head()

import math
import jax.numpy as jnp
from jax.experimental import stax
import jax
from jax import random
from jax import grad, jit, vmap
from jax.experimental import optimizers
## LOSS FUNCTION ##

def loss(params, apply_fn, inputs, targets):
    preds = apply_fn(params, inputs)
    out = np.mean((preds - jax.nn.one_hot(targets, 2))**2)
    print(out)
    return out

teamname = pd.read_csv("/content/drive/MyDrive/mens-march-mania-2022/MDataFiles_Stage2/MTeams.csv")
probs = pd.read_csv("/content/submission.csv")
teamprob = {}
for Team in teamname["TeamID"]:
  prob = 0
  i=0
  totalvs = 0
  for vs in probs["ID"]:
    x = vs.split("_")
    strteam = str(Team)
    if (strteam in x[1]):
      totalvs+=1
      prob += probs["Pred"][i]
    elif(strteam in x[2]):
      totalvs+=1
      prob += (1-probs["Pred"][i])
    i+=1
  if totalvs>0:
    teamprob[Team] = prob/totalvs

sort_prob = sorted(teamprob.items(), key=lambda x: x[1], reverse = True )
top5 = sort_prob[:5]
print(sort_prob)
for tup in top5:
  i=0
  for Team in teamname["TeamID"]:
    if Team == tup[0]:
      print(Team, teamname["TeamName"][i],tup[1])
    i+=1